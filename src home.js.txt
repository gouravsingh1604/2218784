import { useState } from "react";import {  Container, TextField, Button, Typography, Box} from "@mui/material";import { shortenUrl } from "../api";export default function Home() {  const [urls, setUrls] = useState([{ url: "", validity: "", shortcode: "" }]);  const [results, setResults] = useState([]);  const handleChange = (index, field, value) => {    const updated = [...urls];    updated[index][field] = value;    setUrls(updated);  };  const handleSubmit = async () => {    const newResults = [];    for (let i = 0; i < urls.length; i++) {      const { url, validity, shortcode } = urls[i];      try {        const res = await shortenUrl(url, validity ? parseInt(validity) : undefined, shortcode);        newResults.push({ ...res, original: url });      } catch (e) {        newResults.push({ error: true, original: url });      }    }    setResults(newResults);  };  const addInput = () => {    if (urls.length < 5) setUrls([...urls, { url: "", validity: "", shortcode: "" }]);  };  return (    <Container>      <Typography variant="h4" sx={{ my: 2 }}>URL Shortener</Typography>      {urls.map((u, i) => (        <Box key={i} sx={{ mb: 2 }}>          <TextField            label="Original URL"            value={u.url}            onChange={e => handleChange(i, "url", e.target.value)}            fullWidth            required            sx={{ mb: 1 }}          />          <TextField            label="Validity (min)"            value={u.validity}            onChange={e => handleChange(i, "validity", e.target.value)}            sx={{ mr: 2 }}          />          <TextField            label="Custom Shortcode"            value={u.shortcode}            onChange={e => handleChange(i, "shortcode", e.target.value)}          />        </Box>      ))}      <Button variant="contained" onClick={addInput} sx={{ mr: 2 }}>+ Add</Button>      <Button variant="contained" onClick={handleSubmit}>Shorten URLs</Button>      {results.map((r, i) => (        <Box key={i} sx={{ mt: 2 }}>          {r.error ? (            <Typography color="error">? Error shortening: {r.original}</Typography>          ) : (            <>              <Typography>?? <strong>{r.original}</strong></Typography>              <Typography>?? <a href={r.shortLink} target="_blank" rel="noreferrer">{r.shortLink}</a></Typography>              <Typography>? Expires at: {new Date(r.expiry).toLocaleString()}</Typography>            </>          )}        </Box>      ))}    </Container>  );}