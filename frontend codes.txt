import React from "react";import ReactDOM from "react-dom/client";import App from "./App";const root = ReactDOM.createRoot(document.getElementById("root"));root.render(<App />);import { useState } from "react";import { Container, TextField, Button, Typography, Box } from "@mui/material";import { getStats } from "../api";export default function Stats() {  const [shortcode, setShortcode] = useState("");  const [data, setData] = useState(null);  const fetchStats = async () => {    try {      const res = await getStats(shortcode);      setData(res);    } catch {      setData(null);    }  };  return (    <Container>      <Typography variant="h4" sx={{ my: 2 }}>Short URL Stats</Typography>      <TextField        label="Shortcode"        value={shortcode}        onChange={e => setShortcode(e.target.value)}        sx={{ mr: 2 }}      />      <Button variant="contained" onClick={fetchStats}>Get Stats</Button>      {data && (        <Box sx={{ mt: 3 }}>          <Typography>?? Original URL: {data.originalUrl}</Typography>          <Typography>?? Created: {new Date(data.createdAt).toLocaleString()}</Typography>          <Typography>? Expires: {new Date(data.expiry).toLocaleString()}</Typography>          <Typography>?? Clicks: {data.clicks.length}</Typography>          {data.clicks.map((c, i) => (            <Box key={i} sx={{ ml: 2, mt: 1 }}>              <Typography>?? Referrer: {c.referrer}</Typography>              <Typography>?? Time: {new Date(c.timestamp).toLocaleString()}</Typography>              <Typography>?? Location: {c.location || "N/A"}</Typography>            </Box>          ))}        </Box>      )}    </Container>  );}import { useState } from "react";import {  Container, TextField, Button, Typography, Box} from "@mui/material";import { shortenUrl } from "../api";export default function Home() {  const [urls, setUrls] = useState([{ url: "", validity: "", shortcode: "" }]);  const [results, setResults] = useState([]);  const handleChange = (index, field, value) => {    const updated = [...urls];    updated[index][field] = value;    setUrls(updated);  };  const handleSubmit = async () => {    const newResults = [];    for (let i = 0; i < urls.length; i++) {      const { url, validity, shortcode } = urls[i];      try {        const res = await shortenUrl(url, validity ? parseInt(validity) : undefined, shortcode);        newResults.push({ ...res, original: url });      } catch (e) {        newResults.push({ error: true, original: url });      }    }    setResults(newResults);  };  const addInput = () => {    if (urls.length < 5) setUrls([...urls, { url: "", validity: "", shortcode: "" }]);  };  return (    <Container>      <Typography variant="h4" sx={{ my: 2 }}>URL Shortener</Typography>      {urls.map((u, i) => (        <Box key={i} sx={{ mb: 2 }}>          <TextField            label="Original URL"            value={u.url}            onChange={e => handleChange(i, "url", e.target.value)}            fullWidth            required            sx={{ mb: 1 }}          />          <TextField            label="Validity (min)"            value={u.validity}            onChange={e => handleChange(i, "validity", e.target.value)}            sx={{ mr: 2 }}          />          <TextField            label="Custom Shortcode"            value={u.shortcode}            onChange={e => handleChange(i, "shortcode", e.target.value)}          />        </Box>      ))}      <Button variant="contained" onClick={addInput} sx={{ mr: 2 }}>+ Add</Button>      <Button variant="contained" onClick={handleSubmit}>Shorten URLs</Button>      {results.map((r, i) => (        <Box key={i} sx={{ mt: 2 }}>          {r.error ? (            <Typography color="error">? Error shortening: {r.original}</Typography>          ) : (            <>              <Typography>?? <strong>{r.original}</strong></Typography>              <Typography>?? <a href={r.shortLink} target="_blank" rel="noreferrer">{r.shortLink}</a></Typography>              <Typography>? Expires at: {new Date(r.expiry).toLocaleString()}</Typography>            </>          )}        </Box>      ))}    </Container>  );}import axios from "axios";import { Log } from "./logger/Log";const BASE_URL = "http://localhost:5000";export async function shortenUrl(url, validity, shortcode) {  try {    const response = await axios.post(`${BASE_URL}/shorturls`, {      url,      validity,      shortcode,    });    await Log("frontend", "info", "api", "Short URL created");    return response.data;  } catch (err) {    await Log("frontend", "error", "api", "Error creating short URL");    throw err;  }}export async function getStats(shortcode) {  try {    const response = await axios.get(`${BASE_URL}/shorturls/${shortcode}`);    await Log("frontend", "info", "api", "Stats fetched");    return response.data;  } catch (err) {    await Log("frontend", "error", "api", "Error fetching stats");    throw err;  }}import axios from "axios";const LOGGING_ENDPOINT = "http://20.244.56.144/evaluation-service/logs";const STACKS = ["frontend"];const LEVELS = ["debug", "info", "warn", "error", "fatal"];const FRONTEND_PACKAGES = [  "api", "component", "hook", "page", "state", "style", "auth", "config", "middleware", "utils"];export async function Log(stack, level, packageName, message) {  stack = stack.toLowerCase();  level = level.toLowerCase();  packageName = packageName.toLowerCase();  if (!STACKS.includes(stack)) return;  if (!LEVELS.includes(level)) return;  if (!FRONTEND_PACKAGES.includes(packageName)) return;  try {    await axios.post(LOGGING_ENDPOINT, {      stack,      level,      package: packageName,      message,    });  } catch (err) {    // silently fail, don't console.log  }}